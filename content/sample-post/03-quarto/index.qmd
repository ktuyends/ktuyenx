---
title: "Hugo Apero Post using Quarto"
layout: single-sidebar
date: "2022-07-24"
publishDate: "2022-07-24"
lastUpdated: "2022-07-24"
slug: test-quarto
categories:
  - Sample
tags:
  - Sample
subtitle: "Kiểm tra một số cú pháp khi viết bài trong blog sử dụng Quarto."
summary: "Kiểm tra một số cú pháp khi viết bài trong blog sử dụng Quarto."
featured: yes
format: hugo
bibliography: references.bib
link-citations: true
jupyter: python3
# knitr:
#   opts_chunk:
#     collapse: false
#     comment: "#>"
---

## 1. Basic Markdown

### 1.1. Math

Example from the [mathjax demo](https://www.mathjax.org/#demo):

When `\(a \ne 0\)`, there are two solutions to \\(ax^2 + bx + c = 0\\) and they are

$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$

If I have a random \$ and another \$ in my text.

$$sd = \sqrt{\frac{\sum_{i=0}^{n}{(x_i-\bar x)^2}}{(n-1)} }$$

### 1.2. Heading

```markdown
## h2 Heading {#custom-id}
### h3 Heading
#### h4 Heading
##### h5 Heading
###### h6 Heading
```

### 1.3. Comments

```markdown
<!--
This is a comment
-->
```

### 1.4. Format

```markdown
*rendered as italicized text*
**rendered as bold text**
***bold and italics***
~~Strike through this text.~~
```

### 1.5. Blockquotes

```markdown
> Đây là một đoạn code
>> Đây là một đoạn code trong một đoạn code
```

### 1.6. List

Dạng 1:

```markdown
1. Lorem ipsum dolor sit amet
2. Consectetur adipiscing elit
3. Integer molestie lorem at massa
```

Dạng 2:

```markdown
- Facilisis in pretium nisl aliquet
- Nulla volutpat aliquam velit
    - Phasellus iaculis neque
    - Purus sodales ultricies
```

Dạng 3, task list:

```markdown
- [x] Write the press release
- [ ] Update the website
- [ ] Contact the media
```

### 1.7. Code

**Inline:**

```markdown
In this example, `<section></section>` should be wrapped as **code**.
```

<details>
<summary>
Hide Code
</summary>

```python
import matplotlib.pyplot as plt
import numpy as np

t = np.arange(0.0, 2.0, 0.01)
s = 1 + np.sin(2*np.pi*t)
plt.plot(t, s)

plt.xlabel('time (s)')
plt.ylabel('voltage (mV)')
plt.title('About as simple as it gets, folks')
plt.grid(True)
plt.savefig("test.png")
plt.show()
```

</details>

**Gist:**

{{< gist spf13 7896402 >}}

### 1.8. Table

| Option | Description |
| ------ | ----------- |
| data   | path to data files to supply the data that will be passed into templates. |
| engine | engine to be used for processing templates. Handlebars is the default. |
| ext    | extension to be used for dest files. |

### 1.9. Link


```markdown
<https://assemble.io>

<contact@revolunet.com>

[Assemble](https://assemble.io)

[Upstage](https://github.com/upstage/ "Visit Upstage!")
```

### 1.10. Image & Figure

```markdown
![Minion](https://octodex.github.com/images/minion.png)

![Alt text](https://octodex.github.com/images/stormtroopocat.jpg "The Stormtroopocat")
```

```html
<img src="./featured.png/" width=80% class="center-fig">
```

<img src="./featured.png/" width=80% class="center-fig">

### 1.11. Shortcodes

Vimeo:

{{< vimeo 146022717 >}}

Youtube:

{{< youtube KRCTOOJ7JrM >}}

## 2. Citations & Footnotes

### 2.1. Footnotes

```markdown
Here is a footnote reference,[^1] and another.[^longnote]

[^1]: Here is the footnote.

[^longnote]: Here's one with multiple blocks.

    Subsequent paragraphs are indented to show that they belong to the previous footnote.

        `some code`

    The whole paragraph can be indented, or just the first line.  In this way, multi-paragraph footnotes work like
    multi-paragraph list items.

This paragraph won't be part of the note, because it isn't indented.

Here is an inline note.^[Inlines notes are easier to write, since you don't have to pick an identifier and move down to
type the note.]
```

Here is a footnote reference,[^1] and another.[^longnote]

[^1]: Here is the footnote.

[^longnote]: Here's one with multiple blocks.

    Subsequent paragraphs are indented to show that they belong to the previous footnote.

        `some code`

    The whole paragraph can be indented, or just the first line.  In this way, multi-paragraph footnotes work like
    multi-paragraph list items.

This paragraph won't be part of the note, because it isn't indented.

Here is an inline note.^[Inlines notes are easier to write, since you don't have to pick an identifier and move down to
type the note.]

### 2.2. Citations

```markdown
Blah Blah [@wickham2015; @knuth1984]

Blah Blah [see @knuth1984, pp. 33-35;
also @wickham2015, chap. 1]

@knuth1984 says blah

@knuth1984 [p. 33] says blah.
```

Blah Blah [@wickham2015; @knuth1984]

Blah Blah [see @knuth1984, pp. 33-35;
also @wickham2015, chap. 1]

@knuth1984 says blah

@knuth1984 [p. 33] says blah.

```markdown
::: {#refs}
:::
```

::: {#refs}
:::

## 3. Cross References

**Figures**

```markdown
![Elephant](elephant.png){#fig-elephant}
```

See `@fig-elephant` for an illustration.

**Plots**

    ```{{python}}
    #| label: fig-plot
    #| fig-cap: "Plot"
    import matplotlib.pyplot as plt
    plt.plot([1,23,2,4])
    plt.show()
    ```

For example, see `@fig-plot`.

**Tables**

``` {{r}}
#| label: tbl-iris
#| tbl-cap: "Iris Data"
library(knitr)
kable(head(iris))
```

For example, see `@tbl-iris`.

**Equations**

Black-Scholes `@eq-black-scholes` is a mathematical model that seeks to explain the behavior of financial derivatives, most commonly options:

```markdown
$$
sd = \sqrt{\frac{\sum_{i=0}^{n}{(x_i-\bar x)^2}}{(n-1)} }
$$ {#eq-black-scholes}
```

## 4. Execution Code

### 4.1. Output Options

Chúng ta có thể sử dụng một số tùy chỉnh để thiết lập trạng thái của code chunk. Các tùy chỉnh này được thiết lập ở phần `YAML` của bài viết hoặc thiết lập bên trong code chunk để ghi đè các thiết lập.

Ví dụ, thiết lập bên trong `YAML`:

```yaml
---
title: "My Document"
execute:
  echo: false
jupyter: python3
---
```

Hoặc là ghi đè bên trong code chunk:

```{{python}}
#| echo: true

import matplotlib.pyplot as plt
plt.plot([1,2,3,4])
plt.show()
```

Các thiết lập chúng ta có thể sử dụng:

| Option    | Description  |
|-----------|--------------|
| `eval`    | Mặc định là `true` - thực thi code chunk|
| `echo`    | Mặc định là `true` - output sẽ bao gồm source code |
| `output`  | Mặc định là `true` - output sẽ bao gồm kết quả được thực thi|
| `warning` | Mặc định là `true` - output sẽ bao gồm các thông báo đi kèm với kết quả|
| `error`   | Mặc định là `true` - output sẽ bao gồm các lỗi nếu nó xảy ra|
| `include` | Mặc định là `true`, nếu là `false` sẽ không hiển thị source code và output, tuy nhiên code vẫn được thực thi|

### 4.2. Figure Options

Chúng ta có một số cách để tùy chỉnh kích thước của các đồ thị được vẽ bởi R hoặc Python.

- Nếu sử dụng Knitr để render, chúng ta có `fig.width` và `fig.height`.
- Nếu sử dụng Jupyter để render, chúng ta có `figure.figsize`.
- Chúng ta sử dụng `fig-cap` và `fig-alt` để thêm caption và alt text cho đồ thị.

Ví dụ:

```{{python}}
#| fig-cap: "Polar axis plot"
#| out.width: "50%"
#| fig.align: 'center'

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

### 4.3. Inline Code

Để sử dụng kết quả của một biến khi trình bày với `R` chúng ta sử dụng biểu thức `` `r ` ``.

Để sử dụng kết quả của một biến khi trình bày với `Python`, chúng ta sử dụng [`IPython.display.Markdown`](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html):

```{{python}}
radius = 15
from IPython.display import display, Markdown
display(Markdown(f"The radius of the circle is {radius}."))
```
